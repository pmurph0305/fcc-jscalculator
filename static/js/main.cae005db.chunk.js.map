{"version":3,"sources":["CalcButton/CalcButton.js","Calculator/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["CalcButton","_ref","keyId","displayed","onClick","react_default","a","createElement","className","id","keys","value","operators","replacableInputs","ops","Calculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onKeyClick","addToNumberState","processOperator","doCalculation","operator","num1","num2","result","state","currentValue","indexOf","parseFloat","parseInt","heldValue","setState","toString","_this2","map","item","src_CalcButton_CalcButton","key","React","Component","App","src_Calculator_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAUeA,SANI,SAAAC,GAAiC,IAA/BC,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,UAAWC,EAAaH,EAAbG,QACrC,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcJ,QAAS,kBAAMA,EAAQD,IAAYM,GAAIP,GAAQC,KCA7EO,SAAO,CACX,CAACD,GAAG,QAASE,MAAM,MACnB,CAACF,GAAG,UAAWE,MAAM,KACrB,CAACF,GAAG,OAAQE,MAAM,KAClB,CAACF,GAAG,QAASE,MAAM,KACnB,CAACF,GAAG,QAASE,MAAM,KACnB,CAACF,GAAG,OAAQE,MAAM,KAClB,CAACF,GAAG,OAAQE,MAAM,KAClB,CAACF,GAAG,OAAQE,MAAM,KAClB,CAACF,GAAG,MAAOE,MAAM,KACjB,CAACF,GAAG,MAAOE,MAAM,KACjB,CAACF,GAAG,MAAOE,MAAM,KACjB,CAACF,GAAG,QAASE,MAAM,OAKfC,EAAY,CAChB,CAACH,GAAG,MAAOE,MAAM,KACjB,CAACF,GAAG,WAAYE,MAAM,KACtB,CAACF,GAAG,WAAYE,MAAM,KACtB,CAACF,GAAG,SAAUE,MAAM,KACpB,CAACF,GAAG,SAAUE,MAAM,MAGhBE,EAAmB,QACnBC,EAAM,OA0JGC,cAtJb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,WAAa,SAACb,GACZ,OAAQA,GACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACH,OAAOM,EAAKQ,iBAAiBd,GAC/B,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KACH,OAAOM,EAAKS,gBAAgBf,GAC9B,IAAK,IACH,OAAOM,EAAKU,cAAc,KAC5B,QACE,SAhCaV,EAyCnBU,cAAgB,SAACC,GACf,IAAIC,EACAC,EAcAC,EAKJ,OAjBED,GAD4C,IAA1Cb,EAAKe,MAAMC,aAAaC,QAAQ,KAC3BC,WAAWlB,EAAKe,MAAMC,cAEtBG,SAASnB,EAAKe,MAAMC,cAK3BJ,GADyC,IAAvCZ,EAAKe,MAAMK,UAAUH,QAAQ,KACxBC,WAAWlB,EAAKe,MAAMK,WAEtBD,SAASnB,EAAKe,MAAMK,WAEfpB,EAAKe,MAAMJ,UAOvB,IAAK,IACDG,EAAUF,EAAKC,EACf,MACJ,IAAK,IACDC,EAAUF,EAAKC,EACf,MACJ,IAAK,IACDC,EAAUF,EAAKC,EACf,MACJ,IAAK,IACDC,EAAUF,EAAKC,EACf,MACJ,QACI,OAKW,MAAbF,EACFX,EAAKqB,SAAS,CAACL,aAAcF,EAAOQ,WAAYF,UAAWN,EAAOQ,WAAYX,SAAS,KAEvFX,EAAKqB,SAAS,CAACD,UAAWN,EAAOQ,cApFlBtB,EAwFnBS,gBAAkB,SAACE,GACjB,MAAiB,OAAbA,EACKX,EAAKqB,SAAS,CAAEL,aAAc,IAAKI,UAAU,MACnB,KAAxBpB,EAAKe,MAAMJ,SACbX,EAAKqB,SAAS,CAAEL,aAAcL,EAAUS,UAAWpB,EAAKe,MAAMC,aAAcL,SAAUA,KAC1C,IAA1Cd,EAAIoB,QAAQjB,EAAKe,MAAMC,cAGxBhB,EAAKqB,SAAS,CAACL,aAAcL,EAAUA,SAAUA,KAEzDX,EAAKU,cAAcV,EAAKe,MAAMJ,UACvBX,EAAKqB,SAAS,CAAEL,aAAcL,EAAUA,SAAUA,MAnG1CX,EAyGnBQ,iBAAmB,SAACd,GAGlB,MAAc,MAAVA,EAKOE,EAAiBqB,QAAQjB,EAAKe,MAAMC,eAAiB,EACvDhB,EAAKqB,SAAS,CAAEL,aAActB,IAE9BM,EAAKqB,SAAS,CAAEL,aAAahB,EAAKe,MAAMC,aAAatB,IAPxDM,EAAKe,MAAMC,aAAaC,QAAQ,KAAO,EAClCjB,EAAKqB,SAAS,CAAEL,aAAahB,EAAKe,MAAMC,aAAatB,SAD9D,GA3GFM,EAAKe,MAAQ,CACXC,aAAc,IACdI,UAAW,IACXT,SAAU,IALKX,wEAyHV,IAAAuB,EAAApB,KACP,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUC,GAAG,WAAWW,KAAKY,MAAMC,cAClD5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACZE,EAAK+B,IAAI,SAAAC,GAAI,OACZrC,EAAAC,EAAAC,cAACoC,EAAD,CACEC,IAAKF,EAAKjC,GACVP,MAAOwC,EAAKjC,GACZN,UAAWuC,EAAK/B,MAChBP,QAASoC,EAAKhB,gBAIpBnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACZI,EAAU6B,IAAI,SAAAC,GAAI,OACjBrC,EAAAC,EAAAC,cAACoC,EAAD,CACEC,IAAKF,EAAKjC,GACVP,MAAOwC,EAAKjC,GACZN,UAAWuC,EAAK/B,MAChBP,QAASoC,EAAKhB,wBA/IHqB,IAAMC,iBCpBhBC,MARf,WACE,OACE1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cae005db.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './CalcButton.css';\r\n\r\nconst CalcButton = ({keyId, displayed, onClick}) => {\r\n  return (\r\n    <button className='calc-button' onClick={() => onClick(displayed)} id={keyId}>{displayed}</button>\r\n  )\r\n}\r\n\r\nexport default CalcButton;","import React from 'react'\r\n\r\nimport CalcButton from '../CalcButton/CalcButton';\r\n\r\nimport './Calculator.css';\r\n\r\nconst keys = [ \r\n  {id:'clear', value:'AC'},\r\n  {id:'decimal', value:'.'},\r\n  {id:'zero', value:'0'},\r\n  {id:'seven', value:'7'},\r\n  {id:'eight', value:'8'},\r\n  {id:'nine', value:'9'},\r\n  {id:'four', value:'4'},\r\n  {id:'five', value:'5'},\r\n  {id:'six', value:'6'},\r\n  {id:'one', value:'1'},\r\n  {id:'two', value:'2'},\r\n  {id:'three', value:'3'},\r\n  \r\n  \r\n]\r\n\r\nconst operators = [\r\n  {id:'add', value:'+'},\r\n  {id:'subtract', value:'-'},\r\n  {id:'multiply', value:'*'},\r\n  {id:'divide', value:'/'},\r\n  {id:'equals', value:'='},\r\n]\r\n\r\nconst replacableInputs = \"0/*-+\"\r\nconst ops = \"/*-+\"\r\n\r\nclass Calculator extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentValue: \"0\",\r\n      heldValue: \"0\",\r\n      operator: \"\",\r\n    }\r\n  }\r\n\r\n  onKeyClick = (value) => {\r\n    switch (value) {\r\n      case \"0\":\r\n      case \"1\":\r\n      case \"2\":\r\n      case \"3\":\r\n      case \"4\":\r\n      case \"5\":\r\n      case \"6\":\r\n      case \"7\":\r\n      case \"8\":\r\n      case \"9\":\r\n      case \".\":\r\n        return this.addToNumberState(value);\r\n      case \"+\":\r\n      case \"-\":\r\n      case \"/\":\r\n      case \"*\":\r\n      case \"AC\":\r\n        return this.processOperator(value);\r\n      case \"=\":\r\n        return this.doCalculation(\"=\");\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n\r\n  // User Story #9: In any order, I should be able to add,\r\n  // subtract, multiply and divide a chain of numbers of any length,\r\n   // and when I hit =, the correct result should be shown in the element \r\n   // with the id of display.\r\n  doCalculation = (operator) => {\r\n    let num1;\r\n    let num2;\r\n    if (this.state.currentValue.indexOf(\".\") !== -1) {\r\n      num2 = parseFloat(this.state.currentValue);\r\n    } else {\r\n      num2 = parseInt(this.state.currentValue);\r\n    }\r\n    // User Story #12: I should be able to perform any operation \r\n    //(+, -, *, /) on numbers containing decimal points.\r\n    if (this.state.heldValue.indexOf(\".\") !== -1) {\r\n      num1 = parseFloat(this.state.heldValue);\r\n    } else {\r\n      num1 = parseInt(this.state.heldValue);\r\n    }\r\n    let stateOp = this.state.operator;\r\n    let result;\r\n    // User Story #15: My calculator should have several decimal places of precision\r\n    // when it comes to rounding (note that there is no exact standard, \r\n    //but you should be able to handle calculations like 2 / 7 with\r\n    // reasonable precision to at least 4 decimal places).\r\n    switch(stateOp) {\r\n      case \"+\":\r\n          result = (num1+num2)\r\n          break;\r\n      case \"-\":\r\n          result = (num1-num2)\r\n          break;\r\n      case \"*\":\r\n          result = (num1*num2)\r\n          break;\r\n      case \"/\":\r\n          result = (num1/num2)\r\n          break;\r\n      default:\r\n          return;\r\n    }\r\n    // User Story #14: Pressing an operator immediately following \r\n    //= should start a new calculation \r\n    //that operates on the result of the previous evaluation.\r\n    if (operator === \"=\") {\r\n      this.setState({currentValue: result.toString(), heldValue: result.toString(), operator:\"\"})\r\n    } else {\r\n      this.setState({heldValue: result.toString()})\r\n    }\r\n  }\r\n\r\n  processOperator = (operator) => {\r\n    if (operator === \"AC\") {\r\n      return this.setState({ currentValue: \"0\", heldValue:\"0\"});\r\n    } else if (this.state.operator === \"\") {\r\n      return this.setState({ currentValue: operator, heldValue: this.state.currentValue, operator: operator })\r\n    } else if (ops.indexOf(this.state.currentValue) !== -1) {\r\n      // User Story #13: If 2 or more operators are entered consecutively, \r\n      // the operation performed should be the last operator entered.\r\n      return (this.setState({currentValue: operator, operator: operator}))\r\n    } else {\r\n      this.doCalculation(this.state.operator);\r\n      return this.setState({ currentValue: operator, operator: operator });\r\n    }\r\n  }\r\n\r\n  // User Story #8: As I input numbers, I should be able to see my input in the element\r\n  // with the id of \"display\"\r\n  addToNumberState = (value) => {\r\n    // User Story #11: When the decimal element is clicked, a . should append \r\n    //to the currently displayed value; two . in one number should not be accepted.\r\n    if (value === \".\") {\r\n      if (this.state.currentValue.indexOf('.') < 0) {\r\n        return this.setState({ currentValue:this.state.currentValue+value})\r\n      }\r\n    // User Story #10: When inputting numbers, my calculator should not allow a number to begin with multiple zeros.\r\n    } else if (replacableInputs.indexOf(this.state.currentValue) >= 0) {\r\n      return this.setState({ currentValue: value});\r\n    }else {\r\n      return this.setState({ currentValue:this.state.currentValue+value})\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return(\r\n      <div className='calculator'>\r\n        <div className=\"display\" id=\"display\">{this.state.currentValue}</div>\r\n        <div className=\"keys-container\">\r\n          {keys.map(item => \r\n            <CalcButton \r\n              key={item.id} \r\n              keyId={item.id} \r\n              displayed={item.value}\r\n              onClick={this.onKeyClick}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className='operator-container'>\r\n          {operators.map(item => \r\n            <CalcButton \r\n              key={item.id} \r\n              keyId={item.id} \r\n              displayed={item.value}\r\n              onClick={this.onKeyClick}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\n\nimport Calculator from './Calculator/Calculator'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}